2022-06-05 16:14:34:625 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Expr (@ header {
    package antlr;
    import org.antlr.v4.runtime.*;
    import java.io.*;
    import java.util.*;
    //importar clases generadas
    import expresion.*;
}) (@ members {
    public List<String> vars=new ArrayList<>();
    public List<String> semanticErrors=new ArrayList<>();
    public Program program;
                
 }) (RULES (RULE prog (returns Program p) (@ init {
    //ejecutado antes de que la producción tenga efecto
    $p=new Program();

    program=$p;

}) (BLOCK (ALT (+ (BLOCK (ALT (= d decl) {
            $p.addExpression($d.d);

        }) (ALT (= e expr) {
          $p.addExpression($e.e);  
        }))) EOF))) (RULE decl (returns Expression d) (BLOCK (ALT (= name ID) ':' (= type INT_TYPE) '=' (= val NUM) {
        int line=$name.getLine();
        int column=$name.getCharPositionInLine()+1;
        String id=$name.text;

        if(vars.contains(id)){
            semanticErrors.add("Error: variable "+id+" ya declarado ("+ line+", "+column+")");
         }else{
             vars.add(id);
         }
         String type=$type.getText();
         int val=$val.int;
         $d=new VariableDeclaration(id,type,val);

    }))) (RULE expr (returns Expression e) (BLOCK (ALT (= left expr) '*' (= right expr) {
        $e=new Multiplication($left.e,$right.e);

    }) (ALT (= left expr) '+' (= right expr) {
        $e=new Addition($left.e,$right.e);

    }) (ALT (= id ID) {
        int line=$id.getLine();
        int column=$id.getCharPositionInLine()+1;
        if(!vars.contains($id.text)){
            semanticErrors.add("Error: variable"+$id.text+" no declarado ("+ line+", "+column+")");
         }
         $e=new Variable($id.text);  
    }) (ALT (= n NUM) { // Mientras construimos el subárbol de un nodo expr que contiene NUM como el primer hijo, también construimos el objeto Expression
        $e=new expresion.Number($n.int);
    }))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE NUM (BLOCK (ALT '0') (ALT (? (BLOCK (ALT '-'))) [1-9] (* (BLOCK (ALT [0-9])))))) (RULE INT_TYPE (BLOCK (ALT 'INT'))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2022-06-05 16:14:34:636 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Expr (@ header {
    package antlr;
    import org.antlr.v4.runtime.*;
    import java.io.*;
    import java.util.*;
    //importar clases generadas
    import expresion.*;
}) (@ members {
    public List<String> vars=new ArrayList<>();
    public List<String> semanticErrors=new ArrayList<>();
    public Program program;
                
 }) (RULES (RULE prog (returns Program p) (@ init {
    //ejecutado antes de que la producción tenga efecto
    $p=new Program();

    program=$p;

}) (BLOCK (ALT (+ (BLOCK (ALT (= d decl) {
            $p.addExpression($d.d);

        }) (ALT (= e expr) {
          $p.addExpression($e.e);  
        }))) EOF))) (RULE decl (returns Expression d) (BLOCK (ALT (= name ID) ':' (= type INT_TYPE) '=' (= val NUM) {
        int line=$name.getLine();
        int column=$name.getCharPositionInLine()+1;
        String id=$name.text;

        if(vars.contains(id)){
            semanticErrors.add("Error: variable "+id+" ya declarado ("+ line+", "+column+")");
         }else{
             vars.add(id);
         }
         String type=$type.getText();
         int val=$val.int;
         $d=new VariableDeclaration(id,type,val);

    }))) (RULE expr (returns Expression e) (BLOCK (ALT (= left expr) '*' (= right expr) {
        $e=new Multiplication($left.e,$right.e);

    }) (ALT (= left expr) '+' (= right expr) {
        $e=new Addition($left.e,$right.e);

    }) (ALT (= id ID) {
        int line=$id.getLine();
        int column=$id.getCharPositionInLine()+1;
        if(!vars.contains($id.text)){
            semanticErrors.add("Error: variable"+$id.text+" no declarado ("+ line+", "+column+")");
         }
         $e=new Variable($id.text);  
    }) (ALT (= n NUM) { // Mientras construimos el subárbol de un nodo expr que contiene NUM como el primer hijo, también construimos el objeto Expression
        $e=new expresion.Number($n.int);
    }))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE NUM (BLOCK (ALT '0') (ALT (? (BLOCK (ALT '-'))) [1-9] (* (BLOCK (ALT [0-9])))))) (RULE INT_TYPE (BLOCK (ALT 'INT'))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2022-06-05 16:14:34:653 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Expr (@ header {
    package antlr;
    import org.antlr.v4.runtime.*;
    import java.io.*;
    import java.util.*;
    //importar clases generadas
    import expresion.*;
}) (@ members {
    public List<String> vars=new ArrayList<>();
    public List<String> semanticErrors=new ArrayList<>();
    public Program program;
                
 }) (RULES (RULE prog (returns Program p) (@ init {
    //ejecutado antes de que la producción tenga efecto
    $p=new Program();

    program=$p;

}) (BLOCK (ALT (+ (BLOCK (ALT (= d decl) {
            $p.addExpression($d.d);

        }) (ALT (= e expr) {
          $p.addExpression($e.e);  
        }))) EOF))) (RULE decl (returns Expression d) (BLOCK (ALT (= name ID) ':' (= type INT_TYPE) '=' (= val NUM) {
        int line=$name.getLine();
        int column=$name.getCharPositionInLine()+1;
        String id=$name.text;

        if(vars.contains(id)){
            semanticErrors.add("Error: variable "+id+" ya declarado ("+ line+", "+column+")");
         }else{
             vars.add(id);
         }
         String type=$type.getText();
         int val=$val.int;
         $d=new VariableDeclaration(id,type,val);

    }))) (RULE expr (returns Expression e) (BLOCK (ALT (= left expr) '*' (= right expr) {
        $e=new Multiplication($left.e,$right.e);

    }) (ALT (= left expr) '+' (= right expr) {
        $e=new Addition($left.e,$right.e);

    }) (ALT (= id ID) {
        int line=$id.getLine();
        int column=$id.getCharPositionInLine()+1;
        if(!vars.contains($id.text)){
            semanticErrors.add("Error: variable"+$id.text+" no declarado ("+ line+", "+column+")");
         }
         $e=new Variable($id.text);  
    }) (ALT (= n NUM) { // Mientras construimos el subárbol de un nodo expr que contiene NUM como el primer hijo, también construimos el objeto Expression
        $e=new expresion.Number($n.int);
    })))))
2022-06-05 16:14:34:653 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR ExprLexer (@ header {
    package antlr;
    import org.antlr.v4.runtime.*;
    import java.io.*;
    import java.util.*;
    //importar clases generadas
    import expresion.*;
}) (@ members {
    public List<String> vars=new ArrayList<>();
    public List<String> semanticErrors=new ArrayList<>();
    public Program program;
                
 }) (RULES (RULE T__0 (BLOCK (ALT ':'))) (RULE T__1 (BLOCK (ALT '='))) (RULE T__2 (BLOCK (ALT '*'))) (RULE T__3 (BLOCK (ALT '+'))) (RULE ID (BLOCK (ALT [a-z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE NUM (BLOCK (ALT '0') (ALT (? (BLOCK (ALT '-'))) [1-9] (* (BLOCK (ALT [0-9])))))) (RULE INT_TYPE (BLOCK (ALT 'INT'))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2022-06-05 16:14:34:761 action-translator LogManager.java:25 translate 
    public List<String> vars=new ArrayList<>();
    public List<String> semanticErrors=new ArrayList<>();
    public Program program;
                
 
2022-06-05 16:14:34:761 action-translator LogManager.java:25 translate 
    package antlr;
    import org.antlr.v4.runtime.*;
    import java.io.*;
    import java.util.*;
    //importar clases generadas
    import expresion.*;

2022-06-05 16:14:34:803 left-recursion LogManager.java:25 expr returns [Expression e]
    :   ( {} id=ID<tokenIndex=136> {
        int line=$id.getLine();
        int column=$id.getCharPositionInLine()+1;
        if(!vars.contains($id.text)){
            semanticErrors.add("Error: variable"+$id.text+" no declarado ("+ line+", "+column+")");
         }
         $e=new Variable($id.text);  
    }              
        | n=NUM<tokenIndex=148>  { // Mientras construimos el subárbol de un nodo expr que contiene NUM como el primer hijo, también construimos el objeto Expression
        $e=new expresion.Number($n.int);
    }            
        )
        (
          {precpred(_ctx, 4)}?<p=4> '*'<tokenIndex=102> right=expr<tokenIndex=106,p=5> {
                  $e=new Multiplication($left.e,$right.e);

              }
                  | {precpred(_ctx, 3)}?<p=3> '+'<tokenIndex=120> right=expr<tokenIndex=124,p=4> {
                  $e=new Addition($left.e,$right.e);

              }
        )*
    ;
2022-06-05 16:14:34:808 grammar LogManager.java:25 added: (RULE expr (returns Expression e) (BLOCK (ALT (BLOCK (ALT {} (= id (ID (ELEMENT_OPTIONS (= tokenIndex 136)))) {
        int line=$id.getLine();
        int column=$id.getCharPositionInLine()+1;
        if(!vars.contains($id.text)){
            semanticErrors.add("Error: variable"+$id.text+" no declarado ("+ line+", "+column+")");
         }
         $e=new Variable($id.text);  
    }) (ALT (= n (NUM (ELEMENT_OPTIONS (= tokenIndex 148)))) { // Mientras construimos el subárbol de un nodo expr que contiene NUM como el primer hijo, también construimos el objeto Expression
        $e=new expresion.Number($n.int);
    })) (* (BLOCK (ALT ({precpred(_ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) ('*' (ELEMENT_OPTIONS (= tokenIndex 102))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 106) (= p 5)))) {
                  $e=new Multiplication($left.e,$right.e);

              }) (ALT ({precpred(_ctx, 3)}? (ELEMENT_OPTIONS (= p 3))) ('+' (ELEMENT_OPTIONS (= tokenIndex 120))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 124) (= p 4)))) {
                  $e=new Addition($left.e,$right.e);

              }))))))
2022-06-05 16:14:34:808 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, ID=5, NUM=6, INT_TYPE=7, COMMENT=8, WS=9}
2022-06-05 16:14:34:808 semantics LogManager.java:25 strings={':'=1, '='=2, '*'=3, '+'=4, 'INT'=7}
2022-06-05 16:14:34:813 LL1 LogManager.java:25 
DECISION 0 in rule prog
2022-06-05 16:14:34:814 LL1 LogManager.java:25 look=[5, {5..6}]
2022-06-05 16:14:34:814 LL1 LogManager.java:25 LL(1)? false
2022-06-05 16:14:34:814 LL1 LogManager.java:25 
DECISION 1 in rule prog
2022-06-05 16:14:34:814 LL1 LogManager.java:25 look=[{5..6}, <EOF>]
2022-06-05 16:14:34:814 LL1 LogManager.java:25 LL(1)? true
2022-06-05 16:14:34:814 LL1 LogManager.java:25 
DECISION 2 in rule expr
2022-06-05 16:14:34:814 LL1 LogManager.java:25 look=[5, 6]
2022-06-05 16:14:34:814 LL1 LogManager.java:25 LL(1)? true
2022-06-05 16:14:34:814 LL1 LogManager.java:25 
DECISION 3 in rule expr
2022-06-05 16:14:34:814 LL1 LogManager.java:25 look=[null, null]
2022-06-05 16:14:34:814 LL1 LogManager.java:25 LL(1)? false
2022-06-05 16:14:34:814 LL1 LogManager.java:25 
DECISION 4 in rule expr
2022-06-05 16:14:34:814 LL1 LogManager.java:25 look=[null, null]
2022-06-05 16:14:34:814 LL1 LogManager.java:25 LL(1)? false
2022-06-05 16:14:34:815 action-translator LogManager.java:25 translate 
    public List<String> vars=new ArrayList<>();
    public List<String> semanticErrors=new ArrayList<>();
    public Program program;
                
 
2022-06-05 16:14:34:815 action-translator LogManager.java:25 translate 
    package antlr;
    import org.antlr.v4.runtime.*;
    import java.io.*;
    import java.util.*;
    //importar clases generadas
    import expresion.*;

2022-06-05 16:14:34:818 action-translator LogManager.java:25 translate 
    //ejecutado antes de que la producción tenga efecto
    $p=new Program();

    program=$p;


2022-06-05 16:14:34:818 action-translator LogManager.java:25 setAttr [@-1,63:63='p',<0>,27:5] [@-1,65:77='new Program()',<0>,27:7]
2022-06-05 16:14:34:818 action-translator LogManager.java:25 translate new Program()
2022-06-05 16:14:34:818 action-translator LogManager.java:25 attr [@-1,94:94='p',<0>,29:13]
2022-06-05 16:14:34:822 action-translator LogManager.java:25 translate 
            $p.addExpression($d.d);

        
2022-06-05 16:14:34:822 action-translator LogManager.java:25 attr [@-1,14:14='p',<0>,34:13]
2022-06-05 16:14:34:822 action-translator LogManager.java:25 qattr [@-1,31:31='d',<0>,34:30].[@-1,33:33='d',<0>,34:32]
2022-06-05 16:14:34:823 action-translator LogManager.java:25 translate 
          $p.addExpression($e.e);  
        
2022-06-05 16:14:34:823 action-translator LogManager.java:25 attr [@-1,12:12='p',<0>,39:11]
2022-06-05 16:14:34:823 action-translator LogManager.java:25 qattr [@-1,29:29='e',<0>,39:28].[@-1,31:31='e',<0>,39:30]
2022-06-05 16:14:34:824 action-translator LogManager.java:25 translate 
        int line=$name.getLine();
        int column=$name.getCharPositionInLine()+1;
        String id=$name.text;

        if(vars.contains(id)){
            semanticErrors.add("Error: variable "+id+" ya declarado ("+ line+", "+column+")");
         }else{
             vars.add(id);
         }
         String type=$type.getText();
         int val=$val.int;
         $d=new VariableDeclaration(id,type,val);

    
2022-06-05 16:14:34:824 action-translator LogManager.java:25 attr [@-1,19:22='name',<0>,47:18]
2022-06-05 16:14:34:824 action-translator LogManager.java:25 attr [@-1,55:58='name',<0>,48:20]
2022-06-05 16:14:34:825 action-translator LogManager.java:25 qattr [@-1,106:109='name',<0>,49:19].[@-1,111:114='text',<0>,49:24]
2022-06-05 16:14:34:825 action-translator LogManager.java:25 attr [@-1,320:323='type',<0>,56:22]
2022-06-05 16:14:34:825 action-translator LogManager.java:25 qattr [@-1,354:356='val',<0>,57:18].[@-1,358:360='int',<0>,57:22]
2022-06-05 16:14:34:825 action-translator LogManager.java:25 setAttr [@-1,373:373='d',<0>,58:10] [@-1,375:410='new VariableDeclaration(id,type,val)',<0>,58:12]
2022-06-05 16:14:34:825 action-translator LogManager.java:25 translate new VariableDeclaration(id,type,val)
2022-06-05 16:14:34:826 action-translator LogManager.java:25 translate 
2022-06-05 16:14:34:826 action-translator LogManager.java:25 translate 
        int line=$id.getLine();
        int column=$id.getCharPositionInLine()+1;
        if(!vars.contains($id.text)){
            semanticErrors.add("Error: variable"+$id.text+" no declarado ("+ line+", "+column+")");
         }
         $e=new Variable($id.text);  
    
2022-06-05 16:14:34:826 action-translator LogManager.java:25 attr [@-1,20:21='id',<0>,3:18]
2022-06-05 16:14:34:826 action-translator LogManager.java:25 attr [@-1,55:56='id',<0>,4:20]
2022-06-05 16:14:34:826 action-translator LogManager.java:25 qattr [@-1,113:114='id',<0>,5:27].[@-1,116:119='text',<0>,5:30]
2022-06-05 16:14:34:827 action-translator LogManager.java:25 qattr [@-1,175:176='id',<0>,6:50].[@-1,178:181='text',<0>,6:53]
2022-06-05 16:14:34:827 action-translator LogManager.java:25 setAttr [@-1,248:248='e',<0>,8:10] [@-1,250:271='new Variable($id.text)',<0>,8:12]
2022-06-05 16:14:34:827 action-translator LogManager.java:25 translate new Variable($id.text)
2022-06-05 16:14:34:827 action-translator LogManager.java:25 qattr [@-1,14:15='id',<0>,2:49].[@-1,17:20='text',<0>,2:52]
2022-06-05 16:14:34:827 action-translator LogManager.java:25 translate  // Mientras construimos el subárbol de un nodo expr que contiene NUM como el primer hijo, también construimos el objeto Expression
        $e=new expresion.Number($n.int);
    
2022-06-05 16:14:34:827 action-translator LogManager.java:25 setAttr [@-1,144:144='e',<0>,11:9] [@-1,146:173='new expresion.Number($n.int)',<0>,11:11]
2022-06-05 16:14:34:827 action-translator LogManager.java:25 translate new expresion.Number($n.int)
2022-06-05 16:14:34:828 action-translator LogManager.java:25 qattr [@-1,22:22='n',<0>,10:55].[@-1,24:26='int',<0>,10:57]
2022-06-05 16:14:34:828 action-translator LogManager.java:25 translate precpred(_ctx, 4)
2022-06-05 16:14:34:828 action-translator LogManager.java:25 translate 
                  $e=new Multiplication($left.e,$right.e);

              
2022-06-05 16:14:34:829 action-translator LogManager.java:25 setAttr [@-1,21:21='e',<0>,16:19] [@-1,23:58='new Multiplication($left.e,$right.e)',<0>,16:21]
2022-06-05 16:14:34:829 action-translator LogManager.java:25 translate new Multiplication($left.e,$right.e)
2022-06-05 16:14:34:829 action-translator LogManager.java:25 qattr [@-1,20:23='left',<0>,15:107].[@-1,25:25='e',<0>,15:112]
2022-06-05 16:14:34:829 action-translator LogManager.java:25 qattr [@-1,28:32='right',<0>,15:115].[@-1,34:34='e',<0>,15:121]
2022-06-05 16:14:34:829 action-translator LogManager.java:25 translate precpred(_ctx, 3)
2022-06-05 16:14:34:829 action-translator LogManager.java:25 translate 
                  $e=new Addition($left.e,$right.e);

              
2022-06-05 16:14:34:829 action-translator LogManager.java:25 setAttr [@-1,21:21='e',<0>,20:19] [@-1,23:52='new Addition($left.e,$right.e)',<0>,20:21]
2022-06-05 16:14:34:829 action-translator LogManager.java:25 translate new Addition($left.e,$right.e)
2022-06-05 16:14:34:829 action-translator LogManager.java:25 qattr [@-1,14:17='left',<0>,19:111].[@-1,19:19='e',<0>,19:116]
2022-06-05 16:14:34:829 action-translator LogManager.java:25 qattr [@-1,22:26='right',<0>,19:119].[@-1,28:28='e',<0>,19:125]
2022-06-05 16:14:34:830 action-translator LogManager.java:25 translate precpred(_ctx, 4)
2022-06-05 16:14:34:830 action-translator LogManager.java:25 translate precpred(_ctx, 3)
